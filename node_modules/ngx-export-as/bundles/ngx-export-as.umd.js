(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('html2canvas'), require('jspdf'), require('xlsx'), require('html-docx-js/dist/html-docx')) :
    typeof define === 'function' && define.amd ? define('ngx-export-as', ['exports', '@angular/core', 'rxjs', 'html2canvas', 'jspdf', 'xlsx', 'html-docx-js/dist/html-docx'], factory) :
    (factory((global['ngx-export-as'] = {}),global.ng.core,global.rxjs,global.html2canvas,global.jsPDF,global.XLSX,global.htmlDocx));
}(this, (function (exports,i0,rxjs,html2canvas,jsPDF,XLSX,htmlDocx) { 'use strict';

    html2canvas = html2canvas && html2canvas.hasOwnProperty('default') ? html2canvas['default'] : html2canvas;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    window['html2canvas'] = html2canvas;
    var ExportAsService = /** @class */ (function () {
        function ExportAsService() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.get = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var func = 'get' + config.type.toUpperCase();
                if (this[func]) {
                    return this[func](config);
                }
                return rxjs.Observable.create(function (observer) { observer.error('Export type is not supported.'); });
            };
        /**
         * @param {?} config
         * @param {?} fileName
         * @return {?}
         */
        ExportAsService.prototype.save = /**
         * @param {?} config
         * @param {?} fileName
         * @return {?}
         */
            function (config, fileName) {
                config.download = true;
                config.fileName = fileName + '.' + config.type;
                this.get(config).subscribe();
            };
        /**
         * @param {?} content
         * @return {?}
         */
        ExportAsService.prototype.contentToBlob = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var arr = content.split(',');
                    /** @type {?} */
                    var mime = arr[0].match(/:(.*?);/)[1];
                    /** @type {?} */
                    var bstr = atob(arr[1]);
                    /** @type {?} */
                    var n = bstr.length;
                    /** @type {?} */
                    var u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                    observer.next(new Blob([u8arr], { type: mime }));
                    observer.complete();
                });
            };
        /**
         * @param {?} fileContent
         * @return {?}
         */
        ExportAsService.prototype.removeFileTypeFromBase64 = /**
         * @param {?} fileContent
         * @return {?}
         */
            function (fileContent) {
                /** @type {?} */
                var re = /^data:[^]*;base64,/g;
                /** @type {?} */
                var newContent = re[Symbol.replace](fileContent, '');
                return newContent;
            };
        /**
         * @param {?} fileContent
         * @param {?} fileMime
         * @return {?}
         */
        ExportAsService.prototype.addFileTypeToBase64 = /**
         * @param {?} fileContent
         * @param {?} fileMime
         * @return {?}
         */
            function (fileContent, fileMime) {
                return "data:" + fileMime + ";base64," + fileContent;
            };
        /**
         * @param {?} fileName
         * @param {?} dataURL
         * @return {?}
         */
        ExportAsService.prototype.downloadFromDataURL = /**
         * @param {?} fileName
         * @param {?} dataURL
         * @return {?}
         */
            function (fileName, dataURL) {
                var _this = this;
                this.contentToBlob(dataURL).subscribe(function (blob) {
                    _this.downloadFromBlob(blob, fileName);
                });
            };
        /**
         * @param {?} blob
         * @param {?} fileName
         * @return {?}
         */
        ExportAsService.prototype.downloadFromBlob = /**
         * @param {?} blob
         * @param {?} fileName
         * @return {?}
         */
            function (blob, fileName) {
                /** @type {?} */
                var element = document.createElement('a');
                /** @type {?} */
                var url = window.URL.createObjectURL(blob);
                element.setAttribute('download', fileName);
                element.style.display = 'none';
                document.body.appendChild(element);
                element.href = url;
                element.click();
                document.body.removeChild(element);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getPDF = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var jspdf = new jsPDF();
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    jspdf.addHTML(element, function () {
                        if (config.download) {
                            jspdf.save(config.fileName);
                            observer.next();
                        }
                        else {
                            observer.next(jspdf.output('datauristring'));
                        }
                        observer.complete();
                    });
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getPNG = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    html2canvas(element, config.options).then(function (canvas) {
                        /** @type {?} */
                        var imgData = canvas.toDataURL('image/PNG');
                        if (config.type === 'png' && config.download) {
                            _this.downloadFromDataURL(config.fileName, imgData);
                            observer.next();
                        }
                        else {
                            observer.next(imgData);
                        }
                        observer.complete();
                    }, function (err) {
                        observer.error(err);
                    });
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getCSV = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    /** @type {?} */
                    var csv = [];
                    /** @type {?} */
                    var rows = element.querySelectorAll('table tr');
                    rows.forEach(function (rowElement, index) {
                        /** @type {?} */
                        var row = [];
                        /** @type {?} */
                        var cols = rowElement.querySelectorAll('td, th');
                        cols.forEach(function (col, colIndex) {
                            row.push(col.innerText);
                        });
                        csv.push(row.join(','));
                    });
                    /** @type {?} */
                    var csvContent = 'data:text/csv;base64,' + btoa(csv.join('\n'));
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, csvContent);
                        observer.next();
                    }
                    else {
                        observer.next(csvContent);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getTXT = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var nameFrags = config.fileName.split('.');
                config.fileName = nameFrags[0] + ".txt";
                return this.getCSV(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXLS = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    /** @type {?} */
                    var ws3 = XLSX.utils.table_to_sheet(element, config.options);
                    /** @type {?} */
                    var wb = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(wb, ws3, config.fileName);
                    /** @type {?} */
                    var out = XLSX.write(wb, { type: 'base64' });
                    /** @type {?} */
                    var xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, xlsContent);
                        observer.next();
                    }
                    else {
                        observer.next(xlsContent);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXLSX = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return this.getXLS(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getDOCX = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var contentDocument = document.getElementById(config.elementId).outerHTML;
                    /** @type {?} */
                    var content = '<!DOCTYPE html>' + contentDocument;
                    /** @type {?} */
                    var converted = htmlDocx.asBlob(content, config.options);
                    if (config.download) {
                        _this.downloadFromBlob(converted, config.fileName);
                        observer.next();
                        observer.complete();
                    }
                    else {
                        /** @type {?} */
                        var reader_1 = new FileReader();
                        reader_1.onloadend = function () {
                            /** @type {?} */
                            var base64data = reader_1.result;
                            observer.next(base64data);
                            observer.complete();
                        };
                        reader_1.readAsDataURL(converted);
                    }
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getDOC = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return this.getDOCX(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getJSON = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var data = [];
                    // first row needs to be headers
                    /** @type {?} */
                    var headers = [];
                    /** @type {?} */
                    var table = ( /** @type {?} */(document.getElementById(config.elementId)));
                    for (var index = 0; index < table.rows[0].cells.length; index++) {
                        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');
                    }
                    // go through cells
                    for (var i = 1; i < table.rows.length; i++) {
                        /** @type {?} */
                        var tableRow = table.rows[i];
                        /** @type {?} */
                        var rowData = {};
                        for (var j = 0; j < tableRow.cells.length; j++) {
                            rowData[headers[j]] = tableRow.cells[j].innerHTML;
                        }
                        data.push(rowData);
                    }
                    /** @type {?} */
                    var jsonString = JSON.stringify(data);
                    /** @type {?} */
                    var jsonBase64 = btoa(jsonString);
                    /** @type {?} */
                    var dataStr = 'data:text/json;base64,' + jsonBase64;
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, dataStr);
                        observer.next();
                    }
                    else {
                        observer.next(data);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXML = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var xml = '<?xml version="1.0" encoding="UTF-8"?><Root><Classes>';
                    /** @type {?} */
                    var tritem = document.getElementById(config.elementId).getElementsByTagName('tr');
                    for (var i = 0; i < tritem.length; i++) {
                        /** @type {?} */
                        var celldata = tritem[i];
                        if (celldata.cells.length > 0) {
                            xml += '<Class name="' + celldata.cells[0].textContent + '">\n';
                            for (var m = 1; m < celldata.cells.length; ++m) {
                                xml += '\t<data>' + celldata.cells[m].textContent + '</data>\n';
                            }
                            xml += '</Class>\n';
                        }
                    }
                    xml += '</Classes></Root>';
                    /** @type {?} */
                    var base64 = 'data:text/xml;base64,' + btoa(xml);
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, base64);
                        observer.next();
                    }
                    else {
                        observer.next(base64);
                    }
                    observer.complete();
                });
            };
        ExportAsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExportAsService.ctorParameters = function () { return []; };
        /** @nocollapse */ ExportAsService.ngInjectableDef = i0.defineInjectable({ factory: function ExportAsService_Factory() { return new ExportAsService(); }, token: ExportAsService, providedIn: "root" });
        return ExportAsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExportAsModule = /** @class */ (function () {
        function ExportAsModule() {
        }
        ExportAsModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [ExportAsService],
                    },] }
        ];
        return ExportAsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ExportAsService = ExportAsService;
    exports.ExportAsModule = ExportAsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,