/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import html2canvas from 'html2canvas';
import * as jsPDF from 'jspdf';
import * as XLSX from 'xlsx';
import * as htmlDocx from 'html-docx-js/dist/html-docx';
import * as i0 from "@angular/core";
window['html2canvas'] = html2canvas;
export class ExportAsService {
    constructor() { }
    /**
     * @param {?} config
     * @return {?}
     */
    get(config) {
        /** @type {?} */
        const func = 'get' + config.type.toUpperCase();
        if (this[func]) {
            return this[func](config);
        }
        return Observable.create((observer) => { observer.error('Export type is not supported.'); });
    }
    /**
     * @param {?} config
     * @param {?} fileName
     * @return {?}
     */
    save(config, fileName) {
        config.download = true;
        config.fileName = fileName + '.' + config.type;
        this.get(config).subscribe();
    }
    /**
     * @param {?} content
     * @return {?}
     */
    contentToBlob(content) {
        return Observable.create((observer) => {
            /** @type {?} */
            const arr = content.split(',');
            /** @type {?} */
            const mime = arr[0].match(/:(.*?);/)[1];
            /** @type {?} */
            const bstr = atob(arr[1]);
            /** @type {?} */
            let n = bstr.length;
            /** @type {?} */
            const u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            observer.next(new Blob([u8arr], { type: mime }));
            observer.complete();
        });
    }
    /**
     * @param {?} fileContent
     * @return {?}
     */
    removeFileTypeFromBase64(fileContent) {
        /** @type {?} */
        const re = /^data:[^]*;base64,/g;
        /** @type {?} */
        const newContent = re[Symbol.replace](fileContent, '');
        return newContent;
    }
    /**
     * @param {?} fileContent
     * @param {?} fileMime
     * @return {?}
     */
    addFileTypeToBase64(fileContent, fileMime) {
        return `data:${fileMime};base64,${fileContent}`;
    }
    /**
     * @param {?} fileName
     * @param {?} dataURL
     * @return {?}
     */
    downloadFromDataURL(fileName, dataURL) {
        this.contentToBlob(dataURL).subscribe(blob => {
            this.downloadFromBlob(blob, fileName);
        });
    }
    /**
     * @param {?} blob
     * @param {?} fileName
     * @return {?}
     */
    downloadFromBlob(blob, fileName) {
        /** @type {?} */
        const element = document.createElement('a');
        /** @type {?} */
        const url = window.URL.createObjectURL(blob);
        element.setAttribute('download', fileName);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.href = url;
        element.click();
        document.body.removeChild(element);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getPDF(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const jspdf = new jsPDF();
            /** @type {?} */
            const element = document.getElementById(config.elementId);
            jspdf.addHTML(element, function () {
                if (config.download) {
                    jspdf.save(config.fileName);
                    observer.next();
                }
                else {
                    observer.next(jspdf.output('datauristring'));
                }
                observer.complete();
            });
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getPNG(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const element = document.getElementById(config.elementId);
            html2canvas(element, config.options).then((canvas) => {
                /** @type {?} */
                const imgData = canvas.toDataURL('image/PNG');
                if (config.type === 'png' && config.download) {
                    this.downloadFromDataURL(config.fileName, imgData);
                    observer.next();
                }
                else {
                    observer.next(imgData);
                }
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getCSV(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const element = document.getElementById(config.elementId);
            /** @type {?} */
            const csv = [];
            /** @type {?} */
            const rows = element.querySelectorAll('table tr');
            rows.forEach((rowElement, index) => {
                /** @type {?} */
                const row = [];
                /** @type {?} */
                const cols = rowElement.querySelectorAll('td, th');
                cols.forEach((col, colIndex) => {
                    row.push(col.innerText);
                });
                csv.push(row.join(','));
            });
            /** @type {?} */
            const csvContent = 'data:text/csv;base64,' + btoa(csv.join('\n'));
            if (config.download) {
                this.downloadFromDataURL(config.fileName, csvContent);
                observer.next();
            }
            else {
                observer.next(csvContent);
            }
            observer.complete();
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getTXT(config) {
        /** @type {?} */
        const nameFrags = config.fileName.split('.');
        config.fileName = `${nameFrags[0]}.txt`;
        return this.getCSV(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getXLS(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const element = document.getElementById(config.elementId);
            /** @type {?} */
            const ws3 = XLSX.utils.table_to_sheet(element, config.options);
            /** @type {?} */
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws3, config.fileName);
            /** @type {?} */
            const out = XLSX.write(wb, { type: 'base64' });
            /** @type {?} */
            const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;
            if (config.download) {
                this.downloadFromDataURL(config.fileName, xlsContent);
                observer.next();
            }
            else {
                observer.next(xlsContent);
            }
            observer.complete();
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getXLSX(config) {
        return this.getXLS(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getDOCX(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const contentDocument = document.getElementById(config.elementId).outerHTML;
            /** @type {?} */
            const content = '<!DOCTYPE html>' + contentDocument;
            /** @type {?} */
            const converted = htmlDocx.asBlob(content, config.options);
            if (config.download) {
                this.downloadFromBlob(converted, config.fileName);
                observer.next();
                observer.complete();
            }
            else {
                /** @type {?} */
                const reader = new FileReader();
                reader.onloadend = () => {
                    /** @type {?} */
                    const base64data = reader.result;
                    observer.next(base64data);
                    observer.complete();
                };
                reader.readAsDataURL(converted);
            }
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getDOC(config) {
        return this.getDOCX(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getJSON(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            const data = [];
            // first row needs to be headers
            /** @type {?} */
            const headers = [];
            /** @type {?} */
            const table = (/** @type {?} */ (document.getElementById(config.elementId)));
            for (let index = 0; index < table.rows[0].cells.length; index++) {
                headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');
            }
            // go through cells
            for (let i = 1; i < table.rows.length; i++) {
                /** @type {?} */
                const tableRow = table.rows[i];
                /** @type {?} */
                const rowData = {};
                for (let j = 0; j < tableRow.cells.length; j++) {
                    rowData[headers[j]] = tableRow.cells[j].innerHTML;
                }
                data.push(rowData);
            }
            /** @type {?} */
            const jsonString = JSON.stringify(data);
            /** @type {?} */
            const jsonBase64 = btoa(jsonString);
            /** @type {?} */
            const dataStr = 'data:text/json;base64,' + jsonBase64;
            if (config.download) {
                this.downloadFromDataURL(config.fileName, dataStr);
                observer.next();
            }
            else {
                observer.next(data);
            }
            observer.complete();
        });
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getXML(config) {
        return Observable.create((observer) => {
            /** @type {?} */
            let xml = '<?xml version="1.0" encoding="UTF-8"?><Root><Classes>';
            /** @type {?} */
            const tritem = document.getElementById(config.elementId).getElementsByTagName('tr');
            for (let i = 0; i < tritem.length; i++) {
                /** @type {?} */
                const celldata = tritem[i];
                if (celldata.cells.length > 0) {
                    xml += '<Class name="' + celldata.cells[0].textContent + '">\n';
                    for (let m = 1; m < celldata.cells.length; ++m) {
                        xml += '\t<data>' + celldata.cells[m].textContent + '</data>\n';
                    }
                    xml += '</Class>\n';
                }
            }
            xml += '</Classes></Root>';
            /** @type {?} */
            const base64 = 'data:text/xml;base64,' + btoa(xml);
            if (config.download) {
                this.downloadFromDataURL(config.fileName, base64);
                observer.next();
            }
            else {
                observer.next(base64);
            }
            observer.complete();
        });
    }
}
ExportAsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ExportAsService.ctorParameters = () => [];
/** @nocollapse */ ExportAsService.ngInjectableDef = i0.defineInjectable({ factory: function ExportAsService_Factory() { return new ExportAsService(); }, token: ExportAsService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,