{"version":3,"file":"ngx-export-as.js.map","sources":["ng://ngx-export-as/lib/export-as.service.ts","ng://ngx-export-as/lib/export-as.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ExportAsConfig } from './export-as-config.model';\n\nimport html2canvas from 'html2canvas';\nimport * as jsPDF from 'jspdf';\nimport * as XLSX from 'xlsx';\nimport * as htmlDocx from 'html-docx-js/dist/html-docx';\n\nwindow['html2canvas'] = html2canvas;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExportAsService {\n\n  constructor() { }\n\n  get(config: ExportAsConfig): Observable<string | null> {\n    const func = 'get' + config.type.toUpperCase();\n    if (this[func]) {\n      return this[func](config);\n    }\n\n    return Observable.create((observer) => { observer.error('Export type is not supported.'); });\n  }\n\n  save(config: ExportAsConfig, fileName: string): void {\n    config.download = true;\n    config.fileName = fileName + '.' + config.type;\n    this.get(config).subscribe();\n  }\n\n  contentToBlob(content: string): Observable<Blob> {\n    return Observable.create((observer) => {\n      const arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]);\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      observer.next(new Blob([u8arr], { type: mime }));\n      observer.complete();\n    });\n  }\n\n  removeFileTypeFromBase64(fileContent: string): string {\n    const re = /^data:[^]*;base64,/g;\n    const newContent: string = re[Symbol.replace](fileContent, '');\n    return newContent;\n  }\n\n  addFileTypeToBase64(fileContent: string, fileMime: string): string {\n    return `data:${fileMime};base64,${fileContent}`;\n  }\n\n  downloadFromDataURL(fileName: string, dataURL: string): void {\n    this.contentToBlob(dataURL).subscribe(blob => {\n      this.downloadFromBlob(blob, fileName);\n    });\n  }\n\n  downloadFromBlob(blob: Blob, fileName: string) {\n    const element = document.createElement('a');\n    const url = window.URL.createObjectURL(blob);\n    element.setAttribute('download', fileName);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.href = url;\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  private getPDF(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const jspdf = new jsPDF();\n      const element: HTMLElement = document.getElementById(config.elementId);\n      jspdf.addHTML(element, function () {\n        if (config.download) {\n          jspdf.save(config.fileName);\n          observer.next();\n        } else {\n          observer.next(jspdf.output('datauristring'));\n        }\n        observer.complete();\n      });\n    });\n  }\n\n  private getPNG(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const element: HTMLElement = document.getElementById(config.elementId);\n      html2canvas(element, config.options).then((canvas) => {\n        const imgData = canvas.toDataURL('image/PNG');\n        if (config.type === 'png' && config.download) {\n          this.downloadFromDataURL(config.fileName, imgData);\n          observer.next();\n        } else {\n          observer.next(imgData);\n        }\n        observer.complete();\n      }, err => {\n        observer.error(err);\n      });\n    });\n  }\n\n  private getCSV(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const element: HTMLElement = document.getElementById(config.elementId);\n      const csv = [];\n      const rows: any = element.querySelectorAll('table tr');\n      rows.forEach((rowElement, index: number) => {\n        const row = [];\n        const cols = rowElement.querySelectorAll('td, th');\n        cols.forEach((col, colIndex: number) => {\n          row.push(col.innerText);\n        });\n        csv.push(row.join(','));\n      });\n      const csvContent = 'data:text/csv;base64,' + btoa(csv.join('\\n'));\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, csvContent);\n        observer.next();\n      } else {\n        observer.next(csvContent);\n      }\n      observer.complete();\n    });\n  }\n\n  private getTXT(config: ExportAsConfig): Observable<string | null> {\n    const nameFrags = config.fileName.split('.');\n    config.fileName = `${nameFrags[0]}.txt`;\n    return this.getCSV(config);\n  }\n\n  private getXLS(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n\n      const element: HTMLElement = document.getElementById(config.elementId);\n      const ws3 = XLSX.utils.table_to_sheet(element, config.options);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws3, config.fileName);\n      const out = XLSX.write(wb, { type: 'base64' });\n      const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, xlsContent);\n        observer.next();\n      } else {\n        observer.next(xlsContent);\n      }\n      observer.complete();\n    });\n  }\n\n  private getXLSX(config: ExportAsConfig): Observable<string | null> {\n    return this.getXLS(config);\n  }\n\n  private getDOCX(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const contentDocument: string = document.getElementById(config.elementId).outerHTML;\n      const content = '<!DOCTYPE html>' + contentDocument;\n      const converted = htmlDocx.asBlob(content, config.options);\n      if (config.download) {\n        this.downloadFromBlob(converted, config.fileName);\n        observer.next();\n        observer.complete();\n      } else {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64data = reader.result;\n          observer.next(base64data);\n          observer.complete();\n        };\n        reader.readAsDataURL(converted);\n      }\n    });\n  }\n\n  private getDOC(config: ExportAsConfig): Observable<string | null> {\n    return this.getDOCX(config);\n  }\n\n  private getJSON(config: ExportAsConfig): Observable<any[] | null> {\n    return Observable.create((observer) => {\n      const data = []; // first row needs to be headers\n      const headers = [];\n      const table = <HTMLTableElement>document.getElementById(config.elementId);\n      for (let index = 0; index < table.rows[0].cells.length; index++) {\n        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');\n      }\n      // go through cells\n      for (let i = 1; i < table.rows.length; i++) {\n        const tableRow = table.rows[i]; const rowData = {};\n        for (let j = 0; j < tableRow.cells.length; j++) {\n          rowData[headers[j]] = tableRow.cells[j].innerHTML;\n        }\n        data.push(rowData);\n      }\n      const jsonString = JSON.stringify(data);\n      const jsonBase64 = btoa(jsonString);\n      const dataStr = 'data:text/json;base64,' + jsonBase64;\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, dataStr);\n        observer.next();\n      } else {\n        observer.next(data);\n      }\n      observer.complete();\n    });\n  }\n\n  private getXML(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><Classes>';\n      const tritem = document.getElementById(config.elementId).getElementsByTagName('tr');\n      for (let i = 0; i < tritem.length; i++) {\n        const celldata = tritem[i];\n        if (celldata.cells.length > 0) {\n          xml += '<Class name=\"' + celldata.cells[0].textContent + '\">\\n';\n          for (let m = 1; m < celldata.cells.length; ++m) {\n            xml += '\\t<data>' + celldata.cells[m].textContent + '</data>\\n';\n          }\n          xml += '</Class>\\n';\n        }\n      }\n      xml += '</Classes></Root>';\n      const base64 = 'data:text/xml;base64,' + btoa(xml);\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, base64);\n        observer.next();\n      } else {\n        observer.next(base64);\n      }\n      observer.complete();\n    });\n  }\n\n}\n","/**\n * angular imports\n */\nimport { NgModule } from '@angular/core';\n\n/**\n * my imports\n */\n\nimport { ExportAsService } from './export-as.service';\n\n@NgModule({\n  providers: [ExportAsService],\n})\nexport class ExportAsModule { }\n\n\n"],"names":["XLSX.utils","XLSX.write","htmlDocx.asBlob"],"mappings":"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"}
